$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: CLS
scopeName: source.cls
patterns:
- include: '#layoutSection'
- include: '#exportSection'
- include: '#userMacros'
- include: '#data'
- include: '#comments'
- include: '#section'
repository:
  
  comments:
    match: ^\s*#.*$
    name: comment.line.number-sign.cls

  layoutSection:
    begin: \s*(layout)\s*(\{)
    beginCaptures:
      '1':
        name: variable.language.cls
      '2':
        name: punctuation.section.begin.cls
    end: (?<!\\)(\})
    endCaptures:
      '1':
        name: punctuation.section.end.cls
    patterns:
    - include: '#comments'
    - include: '#propertyLayout'
    - include: '#badEscape'

  propertyLayout:
    begin: \s*(size|data|bleed|template|csv|dpi)\s*(:)
    beginCaptures:
      '1':
        name: entity.other.attribute-name.cls
      '2':
        name: punctuation.sperator.key-value.cls
    end: (;)|\n|(?=\})
    endCaptures:
      '1':
        name: punctuation.terminator.cls
    patterns:
    - match: \b(CLS|excel)\b
      name: support.constant.property-value.cls
    - include: '#number'
    - include: '#escape'
  
  exportSection:
    begin: \s*(export|bulk|pdf|tts)\s*(\{)
    beginCaptures:
      '1':
        name: variable.language.cls
      '2':
        name: punctuation.section.begin.cls
    end: (?<!\\)(\})
    endCaptures:
      '1':
        name: punctuation.section.end.cls
    patterns:
    - include: '#exportSection'
    - include: '#comments'
    - begin: \s*(name)\s*(:)
      beginCaptures:
        '1':
          name: entity.other.attribute-name.cls
        '2':
          name: punctuation.separator.key-value.cls
      end: (;)|\n|(?=\})
      endCaptures:
        '1':
          name: punctuation.terminator.cls
      patterns:
      - include: '#macro'
      - include: '#escape'
    - include: '#propertyExport'
    - include: '#badEscape'
  
  propertyExport:
    begin: \s*(include-bleed|destination|margin|border|page-size|orientation|center-in-page|size)\s*(:)
    beginCaptures:
      '1':
        name: entity.other.attribute-name.cls
      '2':
        name: punctuation.sperator.key-value.cls
    end: (;)|\n|(?=\})
    endCaptures:
      '1':
        name: punctuation.terminator.cls
    patterns:
    - match: \b(portrait|landscape|letter|A4)\b
      name: support.constant.property-value.cls
    - include: '#number'
    - include: '#toggle'
    - include: '#escape'

  userMacros:
    begin: \s*(macros)\s*(\{)
    beginCaptures:
      '1':
        name: variable.language.cls
      '2':
        name: punctuation.section.begin.cls
    end: (?<!\\)(\})
    endCaptures:
      '1':
        name: punctuation.section.end.cls
    patterns:
    - include: '#comments'
    - include: '#macroDef'
    - include: '#badEscape'

  macroDef:
    begin: \s*([^=]+\s*)(=)
    beginCaptures:
      '1':
        name: variable.macro.cls
      '2':
        name: punctuation.definition.cls
    end: (;)|\n|(?=\})
    endCaptures:
      '1':
        name: punctuation.terminator.cls
    patterns:
    - include: '#macroArg'
    - include: '#value'
  
  macroArg:
    match: (\[)\s*(\d\d?|args|arg-total)\s*(\])
    captures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: variable.parameter.cls
      '3':
        name: punctuation.definition.string.end.cls
  
  data:
    begin: \s*(data)\s*(\{)
    beginCaptures:
      '1':
        name: variable.language.cls
      '2':
        name: punctuation.section.begin.cls
    end: (?<!\\)(\})
    endCaptures:
      '1':
        name: punctuation.section.end.cls
    patterns:
    - include: '#comments'
    - include: '#escape'
    - match: ','
      name: punctuation.seperator.value.cls
    - include: '#macro'

  section:
    begin: \s*(?:(defaults)|(\S+))\s*(\{)
    beginCaptures:
      '1':
        name: variable.language.cls
      '2':
        name: entity.name.section.cls
      '3':
        name: punctuation.section.begin.cls
    end: (?<!\\)(\})
    endCaptures:
      '1':
        name: punctuation.section.end.cls
    patterns:
    - include: '#comments'
    - include: '#section'
    - include: '#property'
    - include: '#badEscape'

  property:
    patterns:
    - include: '#propertyType'
    - include: '#propertyElement'

  propertyType:
    begin: \s*(type)\s*(:)
    beginCaptures:
      '1':
        name: entity.other.attribute-name.cls
      '2':
        name: punctuation.seperator.key_value.cls
    end: (;)|\n|(?=\})
    endCaptures:
      '1':
        name: punctuation.terminator.cls
    patterns:
    - match: \s*none|text|image-box|image|rect|circ|ellipse|line\s*
      name: storage.type.cls
  
  propertyElement:
    begin: >
      (?x)\s*(x|y|angle|draw|position|size|width|height|
      text|font-family|font-size|font-color|word-wrap|italic|bold|overline|
      underline|line-through|line-thru|shrink-font|
      align|decoration|v-align|h-align|font|
      source|keep-ratio|scale|scale-width|scale-height|
      line-color|line-style|line-width|line-join|line-cap|fill-color|line|
      x-corner-radius|y-corner-radius|corner-radius|diameter|
      x2|y2|start|end)\s*(:)
    beginCaptures:
      '1':
        name: entity.other.attribute-name.cls
      '2':
        name: punctuation.seperator.key-value.cls
    end: (;)|\n|(?=\})
    endCaptures:
      '1':
        name: punctuation.terminator.cls
    patterns:
    - include: '#value'

  value:
    patterns:
    - include: '#keywordValue'
    - include: '#number'
    - include: '#toggle'
    - include: '#color'
    - include: '#list'
    - include: '#macro'
    - include: '#escape'
  
  keywordValue:
    match: >
      (?x)\b
      (center|left|right|justify|
      top|middle|bottom|
      solid|dash|dots|dash-dot|dot-dash
      miter|bevel|round|
      flat|square|round)\b
    name: support.constant.property-value.cls

  escape:
    match: \\\S|\\\n
    name: constant.character.escape.cls

  badEscape:
    match: \\\S
    name: invalid.cls

  number:
    match: >
      (?x)
      [\-+\^]?(
      \d+[\.\ /]\d+/\d+|
      \d+/\d+|
      \d+|
      \d+\.\d+|
      \.\d+
      )(px|in|mm|pt|deg|%|x)?
    captures:
      '0':
        name: constant.numeric.cls
      '2':
        name: keyword.other.unit.cls
     
  toggle:
    match: \b(true|yes|on|false|no|off)\b
    name: constant.language.cls

  color:
    name: constant.other.color.cls
    captures:
      '1':
        name: constant.other.color.rgb-value.hex.cls
      '2':
        name: support.constant.color.svg-color-name.cls
    match: >
      (?x)
      (\#[a-f0-9]{6})|
      \b(aliceblue|antiquewhite|aqua|aquamarine|azure|beige|bisque|black|blanchedalmond|
      blue|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|
      crimson|cyan|darkblue|darkcyan|darkgoldenrod|darkgray|darkgrey|darkgreen|darkkhaki|
      darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|
      darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|
      dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|fuchsia|gainsboro|ghostwhite|
      gold|goldenrod|gray|grey|green|greenyellow|honeydew|hotpink|indianred|indigo|ivory|khaki|
      lavender|lavenderblush|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|
      lightgoldenrod|lightgray|lightgrey|lightgreen|lightpink|lightsalmon|lightseagreen|
      lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|lime|limegreen|
      linen|megenta|maroon|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|
      mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|mednightblue|mintcream|
      mistyrose|moccasin|navajowhite|navy|oldlace|olive|olivedrab|orange|orangered|orchid|
      palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|
      powderblue|purple|red|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|
      sienna|silver|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|teal|
      thistle|tomato|turquoise|transparent|violet|wheat|white|whitesmoke|yellow|yellowgreen)\b

  list:
    begin: \(
    beginCaptures:
      '0':
        name: punctuation.definition.list.begin.cls
    end: \)
    endCaptures:
      '0':
        name: punctuation.definition.list.end.cls
    patterns:
    - match: ','
      name: punctuation.separator.value.cls
    - include: '#value'

  macro:
    patterns:
    - include: '#switchMacro'
    - include: '#loopMacros'
    - include: '#ifMacro'
    - include: '#testMacro'
    - include: '#mathMacro'
    - include: '#escapeMacro'
    - include: '#macroBlank'
    - include: '#macroStd'
    - include: '#macroOther'

  switchMacro:
    begin: (\[)\s*(switch)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: keyword.control.flow.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#escape'
    - match: '[|,]'
      name: punctuation.definition.string.continue.cls
    - match: 'default'
      name: keyword.control.flow.cls
    - include: '#value'

  
  ifMacro:
    begin: (\[)\s*(if)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: keyword.control.flow.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#testOps'
    - include: '#escape'
    - match: '[|,]'
      name: punctuation.definition.string.continue.cls
    - include: '#value'
    - match: '\?'
      name: keyword.operator.cls

  testMacro:
    begin: (\[)\s*(\?)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: keyword.control.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#testOps'
    - include: '#escape'
    - match: \|
      name: punctuation.definition.string.continue.cls
    - include: '#value'

  testOps:
    match: ==|=!|>|>=|<|<=
    name: keyword.operator.cls

  loopMacros:
    begin: (\[)\s*(for-each|dup)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: keyword.control.flow.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#testOps'
    - include: '#escape'
    - include: '#loopCounters'
    - match: '[|,]'
      name: punctuation.definition.string.continue.cls
    - include: '#value'

  loopCounters:
    match: (\[)\s*(item|d)\s*(\])
    captures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: entity.name.function.cls
      '3':
        name: punctuation.definition.string.end.cls


  mathMacro:
    begin: (\[)\s*(\=)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: keyword.control.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - match: \+|-|\*|/|%
      name: keyword.operator.cls
    - include: '#escape'
    - match: \|
      name: punctuation.definition.string.continue.cls
    - include: '#value'

  escapeMacro:
    begin: (\[)\s*(/)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: control.keyword.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - match: \\\S
      name: constant.character.placeholder.cls
    - include: '#escape'
    - match: \|
      name: punctuation.definition.string.continue.cls
    - include: '#value'

  macroBlank:
    match: \[\s*\]
    name: constant.language.cls

  macroStd:
    begin: >
      (?x)
      (\[)\s*
      (row-index|row-total|card-index|card-total|repeat-index|repeat-total|
      b|i|u|s|
      capitalize|lower|upper|
      file|slice|length|rnd|substr
      in|eq|ne
      )(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: entity.name.function.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#escape'
    - match: '[|,]'
      name: punctuation.definition.string.continue.cls
    - include: '#value'

  macroOther:
    begin: (\[)\s*([^]|,]*?)(?=[]|,\s])
    beginCaptures:
      '1':
        name: punctuation.definition.string.begin.cls
      '2':
        name: variable.other.cls
    end: (?<!\\)\]
    endCaptures:
      '0':
        name: punctuation.definition.string.end.cls
    patterns:
    - include: '#escape'
    - match: '[|,]'
      name: punctuation.definition.string.continue.cls
    - include: '#value'